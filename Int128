using System;

namespace CSharpParser
{
	internal struct Int128 : IComparable<Int128>
	{
		private readonly long _lo;
		private long _hi;

		private Int128(long lo, long hi)
		{
			_lo = lo;
			_hi = hi;
		}

		public bool Equals(Int128 other)
		{
			return _lo.Equals(other._lo) && _hi.Equals(other._hi);
		}

		public override bool Equals(object obj)
		{
			if (ReferenceEquals(null, obj)) return false;
			return obj is Int128 && Equals((Int128)obj);
		}

		public Int128(long x)
		{
			_lo = x;
			_hi = x >> 63;
		}

		public static implicit operator Int128(int value)
		{
			return new Int128(value);
		}

		public static implicit operator Int128(long value)
		{
			return new Int128(value);
		}

		public int CompareTo(Int128 other)
		{
			var f = this - other;
			if (f._hi >> 63 == -1)
				return -1;
			else if (f._hi == 0 && f._lo == 0)
				return 0;
			else return 1;
		}

		private static System.Numerics.BigInteger BigIntegerize(Int128 x)
		{
			var str = (System.Numerics.BigInteger)x._hi;
			str <<= 64;
			str += (ulong)x._lo;
			return str;
		}

		public override string ToString()
		{
			if (_hi >> 63 == -1)
				return (-BigIntegerize(-this)).ToString();
			return BigIntegerize(this).ToString();
		}

		public static Int128 operator +(Int128 f1, Int128 f2)
		{
			var one = f1._lo & f2._lo;
			var zero = ~(f1._lo | f2._lo);
			return new Int128(f1._lo + f2._lo, f1._hi + f2._hi - ((one | ~(zero | one - zero)) >> 63));
		}

		public static Int128 operator -(Int128 f1, Int128 f2)
		{
			return f1 + (-f2);
		}

		private static Int128 Multiply(long a, long b)
		{
			var a1 = a & ~-(1L << 32);
			var a2 = (long)((ulong)a >> 32);
			var b1 = b & ~-(1L << 32);
			var b2 = (long)((ulong)b >> 32);
			var ans = new Int128(a1 * b1, a2 * b2);
			var middle = a2 * b1;
			ans += new Int128(middle << 32, (long)((ulong)middle >> 32));
			middle = a1 * b2;
			ans += new Int128(middle << 32, (long)((ulong)middle >> 32));
			return ans;
		}

		public static Int128 operator *(Int128 f1, Int128 f2)
		{
			var ans = Multiply(f1._lo, f2._lo);
			ans._hi += f1._hi * f2._lo + f1._lo * f2._hi;
			return ans;
		}

		public static Int128 operator -(Int128 f1)
		{
			return new Int128(~f1._lo + 1, ~f1._hi + (f1._lo == 0 ? 1 : 0));
		}

		public static bool operator ==(Int128 f1, Int128 f2)
		{
			return f1.CompareTo(f2) == 0;
		}

		public static bool operator !=(Int128 f1, Int128 f2)
		{
			return f1.CompareTo(f2) != 0;
		}

		public static bool operator >(Int128 f1, Int128 f2)
		{
			return f1.CompareTo(f2) > 0;
		}

		public static bool operator <(Int128 f1, Int128 f2)
		{
			return f1.CompareTo(f2) < 0;
		}

		public static bool operator >=(Int128 f1, Int128 f2)
		{
			return f1.CompareTo(f2) >= 0;
		}

		public static bool operator <=(Int128 f1, Int128 f2)
		{
			return f1.CompareTo(f2) <= 0;
		}

		public static explicit operator int(Int128 f)
		{
			return (int)f._lo;
		}

		public static explicit operator long(Int128 f)
		{
			return f._lo;
		}

		public static Int128 Zero { get; } = new Int128(0);
		public static Int128 One { get; } = new Int128(1);
	}
}
